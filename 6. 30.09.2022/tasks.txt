1. Student class
 - No
 - FullName
 - Exams - dictionary (exam name,point)
 - AddExam() - examName və point dəyərləri qəbul edib tələbəyə yeni imtahan əlavə edir
 - GetExamResult() - examName dəyəri qəbul edib həmin exam-in balını qaytarır
 - GetExamAvg() - tələbənin bütün imtahanlarının ortalamasını qaytarır


Dictionary<string,int>


Program.cs-də bir Student listi düzəldirsiniz
Layihə run olanda bizə bir menu pəncərəsi açılır:

1. Tələbə əlavə et
2. Tələbəyə imtahan əlavə et
3. Tələbənin bir imtahan balına bax
4. Tələbənin bütün imtahanlarını göstər
5. Tələbənin imtahan ortalamasını göstər
6. Tələbədən imtahan sil
0. Proqramı bitir

1 seçilərsə tələbə datasının yaradılması üçün FullName dəyəri qəbul edilir və tələbə yaradılıb listə əlavə edilir
2 seçilərsə tələbənin nömrəsi, imtahan adı və qiyməti daxil edilir
3 seçilərsə tələbə no dəyəri və imtahan adı daxil edilməlidir və nömrəsi daxil edlən tələbənin həmin imtahan balı göstərilməlidir
4 seçilərsə tələbənin no dəyəri daxil edilir və o tələbənin bütün imthan adları və balları göstərilir
5 seçilərsə tələbənin no dəyəri daxil edilir və o tələbənin bütün imtahanlarının ortalama balı göstərilir
6 seçilərsə tələbə no dəyəri və imtahan adı daxil edilir və həmin tələbədən həmin imtahan dəyəri silinir


Proqramda bütün halları nəzərə almalısınız(key varmı yoxdumu, göndərilən nömrəli tələbə varmı yoxdumu və s. kimi)



2.Order class
 - No
 - ProductCount

 - Price
 - CreatedAt - orderin yaranma tarixi
 
Shop class
 - Orders - order listi
 - AddOrder() - order obyektini listə add edir
 - GetOrdersAvg() - bütün orderlərin ortalma qiymətini hesablayır qaytarır
 - GetOrdersAvg() - Datetime dəyəri qəbul edir və həmin tarixdən sonrakı bütün orderlərin ortalama 
qiymətini qaytarır (burada c#da datetime ilə işləməyi araşdırmağınızı istəyirəm)
 - RemoveOrderByNo() - göndərilən no dəyərindəki orderi siyahıdan silir
 - FilterOrderByPrice() - minPrice və maxPrice dəyərləri qəbul edir və həmin aralıqdakı qiymətə sahib order listi qaytarır


3. Meeting class:
-FromDate - Meetingin başlama tarixini bildirir
-ToDate - Meetingin bitmə  tarixini bildirir
-Name - Meetigin adını bildirir
 
MeetingSchedule class:
Meetings - Meeting listi
SetMeeting(fullname,from,to) - göndərilmiş dəyərlərə əsasən meeting yaratmağa çalışır.
                                                      Əgər Göndərilmiş tarix intervalında meeting varsaException baş verir
                                                      hər şey okaydirsə meeting obyekti yaradıb meeting listinə add edir.



FindMeetingsCount() - bu metod  parametr olaraq datetime qəbul edir və həmin date-dən sonra başlayan meetinglərin sayını qaytarır



IsExistsMeetingByName() - bu metod parametr olaraq string qəbul edir və əgər meetings listində hansısa meetingin name dəyərində parametr olaraq göndərilən string dəyər varsa  true, yoxdursa false qaytarır



GetExistMeetings() - bu metod parametr oıaraq name dəyəri qəbul edir və əgər meetings listində adında həmin dəyər olan meetinglerdən ibarət list qaytarır


Qeyd: Metodları yazarkən  Listin var olan metodlarından istifadə etməyə çalışın